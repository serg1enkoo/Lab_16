#include <iostream> // Підключаємо бібліотеку для введення/виведення даних (наприклад, std::cout та std::cin)
#include <ctime>    // Підключаємо бібліотеку для роботи з часом та датою

// Оголошуємо структуру Date, яка представляє дату
struct Date {
    int year;  // Рік
    int month; // Місяць
    int day;   // День
};

// Функція isLeap приймає рік як аргумент і повертає true, якщо рік є високосним, і false в іншому випадку
bool isLeap(int year) {
    // Рік є високосним, якщо він ділиться на 4, але не ділиться на 100, крім випадків, коли він також ділиться на 400
    return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
}

// Функція monthLength приймає рік та місяць як аргументи і повертає кількість днів у цьому місяці заданого року
int monthLength(int year, int month) {
    // Перевіряємо, чи є місяць лютим
    if (month == 2) {
        // Якщо рік високосний, то в лютому 29 днів, інакше - 28
        return isLeap(year) ? 29 : 28;
    }
    // Перевіряємо, чи є місяць одним з місяців, що мають 30 днів (квітень, червень, вересень, листопад)
    else if (month == 4 || month == 6 || month == 9 || month == 11) {
        return 30;
    }
    // Всі інші місяці мають 31 день
    else {
        return 31;
    }
}

// Функція today не приймає аргументів і повертає структуру Date, заповнену поточною датою
Date today(void) {
    std::time_t t = std::time(NULL); // Отримуємо поточне значення календарного часу системи в секундах
    std::tm tl = *std::localtime(&t); // Перетворюємо отриманий час в локальний час і отримуємо вказівник на структуру tm

    Date today_date; // Створюємо об'єкт структури Date для зберігання поточної дати
    today_date.year = tl.tm_year + 1900; // Поле tm_year структури tm містить кількість років, що минули з 1900 року, тому додаємо 1900
    today_date.month = tl.tm_mon + 1;   // Поле tm_mon містить номер місяця (від 0 до 11), тому додаємо 1
    today_date.day = tl.tm_mday;     // Поле tm_mday містить день місяця (від 1 до 31)
    return today_date; // Повертаємо структуру Date з поточною датою
}

// Функція daysSinceBeginning приймає структуру Date як аргумент і повертає кількість днів, що минули з початку року 1 до цієї дати
long long daysSinceBeginning(Date date) {
    long long days = 0; // Ініціалізуємо лічильник днів

    // Проходимо по роках від 1 до року, що передує заданій даті
    for (int y = 1; y < date.year; ++y) {
        // Додаємо кількість днів у поточному році (366 для високосного, 365 для звичайного)
        days += isLeap(y) ? 366 : 365;
    }

    // Проходимо по місяцях від 1 до місяця, що передує заданій даті
    for (int m = 1; m < date.month; ++m) {
        // Додаємо кількість днів у поточному місяці заданого року
        days += monthLength(date.year, m);
    }

    // Додаємо кількість днів у поточному місяці
    days += date.day;
    return days; // Повертаємо загальну кількість днів
}

int main(void) {
    Date t = today(); // Викликаємо функцію today для отримання поточної дати і зберігаємо її в змінній t типу Date
    std::cout << "Поточна дата: " << t.year << "-" << t.month << "-" << t.day << std::endl; // Виводимо поточну дату на екран

    int birthYear, birthMonth, birthDay; // Оголошуємо змінні для зберігання року, місяця та дня народження користувача
    std::cout << "Введіть рік народження: "; // Запитуємо у користувача рік народження
    std::cin >> birthYear;               // Зчитуємо введене значення і зберігаємо в змінній birthYear
    std::cout << "Введіть місяць народження: "; // Запитуємо у користувача місяць народження
    std::cin >> birthMonth;              // Зчитуємо введене значення і зберігаємо в змінній birthMonth
    std::cout << "Введіть день народження: ";   // Запитуємо у користувача день народження
    std::cin >> birthDay;                // Зчитуємо введене значення і зберігаємо в змінній birthDay

    Date birthday = {birthYear, birthMonth, birthDay}; // Створюємо об'єкт структури Date для зберігання дати народження

    long long daysBirthday = daysSinceBeginning(birthday); // Викликаємо функцію daysSinceBeginning для обчислення кількості днів від початку року 1 до дня народження
    long long daysToday = daysSinceBeginning(t);        // Викликаємо функцію daysSinceBeginning для обчислення кількості днів від початку року 1 до поточної дати

    long long differenceInDays = daysToday - daysBirthday; // Обчислюємо різницю між кількістю днів до поточної дати та кількістю днів до дня народження

    std::cout << "Кількість днів, що пройшли від вашого дня народження до поточної дати: "
              << differenceInDays << " днів." << std::endl; // Виводимо результат на екран

    return 0; // Повертаємо 0, що свідчить про успішне завершення програми
}
